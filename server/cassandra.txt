const models: any = ExpressCassandra.createClient({
    clientOptions: {
        contactPoints: [process.env.DB_CONTACT_POINTS],
        localDataCenter: String(process.env.DB_LOCAL_DATA_CENTER),
        protocolOptions: { port: Number(process.env.DB_PORT) },
        keyspace: String(process.env.DB_KEYSPACE),
        queryOptions: { consistency: ExpressCassandra.consistencies.one },
        credentials: {
            username: String(process.env.DB_USER),
            password: String(process.env.DB_PASS),
        },
    },
    ormOptions: {
        defaultReplicationStrategy: {
            class: "SimpleStrategy",
            replication_factor: 1,
        },
        dropTableOnSchemaChange: true,
        migration: "safe",
    },
});

//Tell express-cassandra to use the models-directory, and
//use bind() to load the models using cassandra configurations.
models.setDirectory(__dirname + "/models").bind(
    {
        clientOptions: {
            contactPoints: [process.env.DB_CONTACT_POINTS],
            localDataCenter: String(process.env.DB_LOCAL_DATA_CENTER),
            protocolOptions: { port: Number(process.env.DB_PORT) },
            keyspace: String(process.env.DB_KEYSPACE) || "mykeyspace",
            queryOptions: { consistency: models.consistencies.one },
            credentials: {
                username: String(process.env.DB_USER),
                password: String(process.env.DB_PASS),
            },
        },
        ormOptions: {
            defaultReplicationStrategy: {
                class: "SimpleStrategy",
                replication_factor: 1,
            },
            migration: "safe",
        },
    },
    (err: string) => {
        if (err) throw err;

        // You'll now have a `person` table in cassandra created against the model
        // schema you've defined earlier and you can now access the model instance
        // in `models.instance.Person` object containing supported orm operations.
    }
);

export default models;

import models from "../config/database";

export const UserModel = models.loadSchema("User", {
    fields: {
        id: {
            type: "uuid",
            default: { $db_function: "uuid()" },
        },
        givenName: "varchar",
        familyName: "varchar",
        city: "varchar",
        country: "varchar",
        email: "varchar",
        password: "varchar",
        verified: { type: "boolean", default: false },
        roles: { type: "list", typeDef: "<varchar>", default: [] },
        facebookId: { type: "varchar", default: "" },
        googleId: { type: "varchar", default: "" },
        twitterId: { type: "varchar", default: "" },
    },
    key: [["id"]],
    options: {
        timestamps: {
            createdAt: "created_at", // defaults to createdAt
            updatedAt: "updated_at", // defaults to updatedAt
        },
    },
});
